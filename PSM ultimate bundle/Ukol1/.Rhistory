dunn_vysledek <- dunn.test::dunn.test(x = jazykovy_test, g = kategorie, method = "bonferroni")
print(dunn_vysledek)
plot(TukeyHSD(aov(jaz_test~factor(kategorie))))
jazykovy_test <- nlschools$lang
socioeko_status <- nlschools$SES
# vykreslení prvních deseti hodnot ať vím s čím pracuji
head(jazykovy_test, 10)
head(socioeko_status, 10)
# socioeko na kategorie
kategorie <- factor(socioeko_status, levels = levels(kategorie)[1:5])
# normalita?
res<-residuals(lm(jazykovy_test~kategorie))
PlotQQ(res) # podle QQ je šikmý doleva
shapiro.test(res) # test souhlasí že není normální rozdělení (p = 0.02)
boxplot(jazykovy_test~kategorie,main="vysledky testu podle socioeko statusu",col="orange")
# test variability
oneway.test(jazykovy_test~kategorie, var.equal = FALSE)
# rozptyly jsou různé (p = 0.0007558)
# nemám normální + mám víc než 2 kategorie => kruskal
kruskal.test(jazykovy_test ~ kategorie)
# Kruskal-Wallis chi-squared = 18.791, df = 4, p-value = 0.0008638
# p < alfa takže existuje rozdíl mezi alespoň dvěma skupinami
dunn_vysledek <- dunn.test::dunn.test(x = jazykovy_test, g = kategorie, method = "bonferroni")
print(dunn_vysledek)
UScereal
library(DescTools)
# nacteni knihovny
# Porovnavame 2 vyucujici na zaklade hodnoceni jejich studentu.
#   Je mezi vyucujicimi vyznamny rozdil?
matematici <- data.frame(ucitel = factor(rep(1:2, c(5, 7))),
spokojenost = c(1, 3, 2, 4, 3, 2, 6, 4, 5, 5, 3, 4),
znalost = c(4, 7, 2, 6, 3, 6, 6, 8, 7, 10, 9, 6))
# vytvoreni dat
matematici
# ukazka dat
tapply(matematici$spokojenost,matematici$ucitel,mean)
tapply(matematici$znalost,matematici$ucitel,mean)
boxplot(matematici$spokojenost~matematici$ucitel)
boxplot(matematici$znalost~matematici$ucitel)
t.test(matematici$spokojenost~matematici$ucitel)
t.test(matematici$znalost~matematici$ucitel)
(m1 <- HotellingsT2Test(cbind(matematici$spokojenost, matematici$znalost) ~ matematici$ucitel))
trhliny <- c(6.5, 6.2, 5.8, 6.5, 6.5, 6.9, 7.2, 6.9, 6.1, 6.3, 6.7, 6.6, 7.2, 7.1, 6.8, 7.1, 7.0, 7.2, 7.5, 7.6)
lesk <- c(9.5, 9.9, 9.6, 9.6, 9.2, 9.1, 10.0, 9.9, 9.5, 9.4, 9.1, 9.3, 8.3, 8.4, 8.5, 9.2, 8.8, 9.7, 10.1, 9.2)
sytost <- c(4.4, 6.4, 3.0, 4.1, 0.8, 5.7, 2.0, 3.9, 1.9, 5.7, 2.8, 4.1, 3.8, 1.6, 3.4, 8.4, 5.2, 6.9, 2.7, 1.9)
Y <- cbind(trhliny, lesk, sytost)
# zavisle promenna se sklada ze tri dilcich promennych
pomer <- factor(gl(2,10), labels=c("Nizky", "Vysoky"))
prisady <- factor(gl(2, 5, length=20), labels=c("Nizky", "Vysoky"))
jazykovy_test <- nlschools$lang
library(MASS)
library(DescTools)
library(dunn.test)
jazykovy_test <- nlschools$lang
socioeko_status <- nlschools$SES
# vykreslení prvních deseti hodnot ať vím s čím pracuji
head(jazykovy_test, 10)
head(socioeko_status, 10)
kategorie <- factor(socioeko_status, levels = levels(kategorie)[1:5])
res<-residuals(lm(jazykovy_test~kategorie))
PlotQQ(res) # podle QQ je šikmý doleva
jazykovy_test <- nlschools$lang
socioeko_status <- nlschools$SES
# vykreslení prvních deseti hodnot ať vím s čím pracuji
head(jazykovy_test, 10)
head(socioeko_status, 10)
# socioeko na kategorie
kategorie <- factor(socioeko_status, levels = levels(kategorie)[1:5])
# normalita?
res<-residuals(lm(jazykovy_test~kategorie))
PlotQQ(res) # podle QQ je šikmý doleva
res<-residuals(lm(jazykovy_test~kategorie))
PlotQQ(res) # podle QQ je šikmý doleva
shapiro.test(res) # test souhlasí že není normální rozdělení (p = 0.02)
boxplot(jazykovy_test~kategorie,main="vysledky testu podle socioeko statusu",col="orange")
tapply(jazykovy_test, kategorie, PlotQQ)
res<-residuals(lm(jazykovy_test~kategorie))
PlotQQ(res) # podle QQ je šikmý doleva
shapiro.test(res) # test souhlasí že není normální rozdělení (p = 0.02)
socioeko statusu",col="orange")
jazykovy_test <- nlschools$lang
socioeko_status <- nlschools$SES
# vykreslení prvních deseti hodnot ať vím s čím pracuji
head(jazykovy_test, 10)
head(socioeko_status, 10)
# socioeko na kategorie
kategorie <- factor(socioeko_status, levels = levels(kategorie)[1:5])
# normalita?
res<-residuals(lm(jazykovy_test~kategorie))
PlotQQ(res) # podle QQ je šikmý doleva
shapiro.test(res) # test souhlasí že není normální rozdělení (p = 0.02)
boxplot(jazykovy_test~kategorie,main="vysledky testu podle socioeko statusu",col="orange")
# test variability
oneway.test(jazykovy_test~kategorie, var.equal = FALSE)
oneway.test(jazykovy_test~kategorie, var.equal = FALSE)
jazykovy_test <- nlschools$lang
socioeko_status <- nlschools$SES
# vykreslení prvních deseti hodnot ať vím s čím pracuji
head(jazykovy_test, 10)
head(socioeko_status, 10)
# socioeko na kategorie
kategorie <- factor(socioeko_status, levels = levels(kategorie)[1:5])
# normalita?
res<-residuals(lm(jazykovy_test~kategorie))
PlotQQ(res) # podle QQ je šikmý doleva
shapiro.test(res) # test souhlasí že není normální rozdělení (p = 0.02)
boxplot(jazykovy_test~kategorie,main="vysledky testu podle socioeko statusu",col="orange")
# test variability
oneway.test(jazykovy_test~kategorie, var.equal = FALSE)
TukeyHSD(aov(jazykovy_test~factor(kategorie), var.equal = FALSE))
plot(TukeyHSD(aov(jazykovy_test~factor(kategorie))))
library(MASS)
library(DescTools)
library(dunn.test)
boxplot(jazykovy_test~kategorie,main="vysledky testu podle socioeko statusu",col="orange")
jazykovy_test <- nlschools$lang
socioeko_status <- nlschools$SES
# vykreslení prvních deseti hodnot ať vím s čím pracuji
head(jazykovy_test, 10)
head(socioeko_status, 10)
# socioeko na kategorie
kategorie <- factor(socioeko_status, levels = levels(kategorie)[1:5])
# normalita?
res<-residuals(lm(jazykovy_test~kategorie))
PlotQQ(res) # podle QQ je šikmý doleva
shapiro.test(res) # test souhlasí že není normální rozdělení (p = 0.02)
boxplot(jazykovy_test~kategorie,main="vysledky testu podle socioeko statusu",col="orange")
# test variability
oneway.test(jazykovy_test~kategorie, var.equal = FALSE)
# rozptyly jsou různé (p = 0.0007558) => Existuje minimálně jedna dvojice se statisticky výzmannou rozdílností
TukeyHSD(aov(jazykovy_test~factor(kategorie), var.equal = FALSE))
plot(TukeyHSD(aov(jazykovy_test~factor(kategorie))))
kategorie
UScereal
cereal_data <- UScereal
cereal_data
cereal <- cereal_data[, c("calories", "protein", "fat", "sodium" , "fibre", "carbo","sugars", "potassium", "vitamins")]
cereal$vitamins <- as.numeric(factor(cereal$vitamins))
truncated_row_names <- substr(rownames(cereal), 1, 7)
cereal.hc <- hclust(dist(cereal), "ave")
plot(cereal.hc, hang = -1, labels = truncated_row_names, cex = 0.5)
rect.hclust(cereal.hc, k=8)
seg <- cutree(cereal.hc, k=8)
plot(cereal$calories, cereal$sugars, col=seg, pch=19, main="Kalorie vs Cukry")
plot(cereal$calories, cereal$carbo, col=seg, pch=19, main="Kalorie vs Sacharidy")
plot(cereal$calories, cereal$fiber, col=seg, pch=19, main="Kalorie vs Vláknina")
plot(cereal$calories, cereal$fat, col=seg, pch=19, main="Kalorie vs Tuky")
cereal_data <- UScereal
UScereal
cereal_data
cereal_data <- UScereal
UScereal
library(MASS)
UScereal
cereal_data <- UScereal
cereal_data <- subset(cereal_data, select = -c("mfr", "shelf", "vitamins"))
cereal_data <- UScereal
cereal_data
cereal_data <- subset(cereal_data, select = c("name", "calories", "protein", "fat", "sodium", "fibre", "carbo", "sugars", "potassium"))
print(names(cereal_data))
cereal_data <- UScereal
cereal_data
cereal_data <- subset(cereal_data, select = c("calories", "protein", "fat", "sodium", "fibre", "carbo", "sugars", "potassium"))
print(names(cereal_data))
cereal_data
truncated_row_names <- substr(rownames(cereal), 1, 7)
cereal.hc <- hclust(dist(cereal), "ave")
plot(cereal.hc, hang = -1, labels = truncated_row_names, cex = 0.5)
plot(predpovedi$x[,1],predpovedi$x[,2],pch=19,col=predpovedi$class,
main="Graf diskriminacnich funkci",xlab="LD1",ylab="LD2")
library(MASS)
## Diskriminacni analyza
Iris <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),Sp = rep(c("s","c","v"), rep(50,3)))
train <- sample(1:150, 75)
table(Iris$Sp[train])
(z <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train))
predpovedi<-predict(z, Iris[-train, ])
predpovedi$x
plot(predpovedi$x[,1],predpovedi$x[,2],pch=19,col=predpovedi$class,
main="Graf diskriminacnich funkci",xlab="LD1",ylab="LD2")
legend(9,2.2,legend=c(unique(predpovedi$class)),pch=19,col=1:3)
hc <- hclust(dist(USArrests), "ave")
hc <- hclust(dist(USArrests))
plot(hc, hang = -1)
seg<-cutree(hc,k=4)
table(seg)
rect.hclust(hc, k=4, border="red")
# zobrazi skupiny do grafu
tapply(USArrests$Murder,as.factor(seg),mean)
hc <- hclust(dist(cereal_data))
plot(hc, hang = -1)
hc <- hclust(dist(cereal_data))
plot(hc, hang = -1, "ave")
UScereal
cereal_data <- UScereal
cereal_data <- subset(cereal_data, select = c("calories", "protein", "fat", "sodium", "fibre", "carbo", "sugars", "potassium"))
cereal_data
hc <- hclust(dist(cereal_data))
plot(hc, hang = -1)
k <- 3
plot(hc)
rect.hclust(hc, k)
k <- 4
plot(hc)
rect.hclust(hc, k)
truncated_row_names <- substr(rownames(cereal), 1, 7)
cereal.hc <- hclust(dist(cereal), "ave")
plot(cereal.hc, hang = -1, labels = truncated_row_names, cex = 0.5)
rect.hclust(cereal.hc, k=8)
seg <- cutree(cereal.hc, k=8)
plot(cereal$calories, cereal$sugars, col=seg, pch=19, main="Kalorie vs Cukry")
plot(cereal$calories, cereal$carbo, col=seg, pch=19, main="Kalorie vs Sacharidy")
plot(cereal$calories, cereal$fiber, col=seg, pch=19, main="Kalorie vs Vláknina")
plot(cereal$calories, cereal$fat, col=seg, pch=19, main="Kalorie vs Tuky")
pc<-prcomp(cereal,scale=T)$x
plot(pc[,1],pc[,2],col=seg,pch=19, main="Rozdělení podle dvou hlavních komponent")
cereal.sc <- scale(cereal)
cereal.hc.sc <- hclust(dist(cereal.sc), "ave")
plot(cereal.hc.sc, hang = -1, labels = truncated_row_names, cex = 0.5)
rect.hclust(cereal.hc.sc,k=8)
seg.sc <- cutree(cereal.hc.sc, k=8)
plot(cereal$calories, cereal$sugars, col=seg.sc, pch=19, main="Kalorie vs Cukry")
plot(cereal$calories, cereal$carbo, col=seg.sc, pch=19, main="Kalorie vs Sacharidy")
plot(cereal$calories, cereal$fiber, col=seg.sc, pch=19, main="Kalorie vs Vláknina")
plot(cereal$calories, cereal$fat, col=seg.sc, pch=19, main="Kalorie vs Tuky")
plot(cereal$calories, cereal$fat, col=seg.sc, pch=9, main="Kalorie vs Tuky")
plot(cereal$calories, cereal$fat, col=seg.sc, pch=29, main="Kalorie vs Tuky")
plot(cereal$calories, cereal$fat, col=seg.sc, pch=12, main="Kalorie vs Tuky")
plot(cereal$calories, cereal$fat, col=seg.sc, pch=15, main="Kalorie vs Tuky")
plot(cereal$calories, cereal$fat, col=seg.sc, pch=19, main="Kalorie vs Tuky")
UScereal
cereal_data <- UScereal
cereal_data <- subset(cereal_data, select = c("calories", "protein", "fat", "sodium", "fibre", "carbo", "sugars", "potassium"))
cereal_data
hc <- hclust(dist(cereal_data))
plot(hc, hang = -1)
# Určení počtu shluků
k <- 4
plot(hc)
rect.hclust(hc, k)
UScereal
library(MASS)
library(DescTools)
## cerealni vyrobky hodnocene v datovem sobouru UScereal rozdelit do skupin podle meritelnych parametru.
# Vyzkousejte vice deleni a vyberte to, ktere Vam prijde optimalni.
UScereal
cereal_data <- UScereal
cereal_data <- subset(cereal_data, select = c("calories", "protein", "fat", "sodium", "fibre", "carbo", "sugars", "potassium"))
cereal_data
hc <- hclust(dist(cereal_data))
plot(hc, hang = -1)
k <- 4
plot(hc)
rect.hclust(hc, k)
## Vysledky ciselnych testu namerenych v datovem souboru UScereals znazornete vhodnym grafem.
# K jeho vykresleni vyuzijte faktorovou analyzu, pripadne hlavni komponenty, pokud vhodne faktory nebude mozno vytvorit.
fact_anal <- factanal(~., data = cereal, factors = 3)
fact_anal
sc <- factanal(~., data = cereal, factors = 3, scores="Bartlett")$scores
plot(sc[,1],sc[,2],pch=19, main="První 2 faktory")
## vizualizace při diskretizaci proměnných (hrozný způsob diskretizace)
cereal.short <- cereal_data[, c("calories", "protein", "fat", "carbo","sugars")]
sc.sh <- factanal(~., data = cereal.short, factors = 2, scores="Bartlett")$scores
plot(sc.sh[,1],sc.sh[,2],pch=19, main="První 2 faktory")
loading_plot <- biplot(sc, sc, cex = 0.7)
library(gplots)
heatmap.2(abs(fact_anal$loadings),
Colv = NA, Rowv = NA,
col = colorRampPalette(c("white", "blue"))(100),
scale = "none",
margins = c(5,10),
main = "Heatmap zatížení proměnných na faktory",
cexCol = 1)
## Vysledky ciselnych testu namerenych v datovem souboru UScereals znazornete vhodnym grafem.
# K jeho vykresleni vyuzijte faktorovou analyzu, pripadne hlavni komponenty, pokud vhodne faktory nebude mozno vytvorit.
fact_anal <- factanal(~., data = cereal, factors = 5)
fact_anal
sc <- factanal(~., data = cereal, factors = 5, scores="Bartlett")$scores
plot(sc[,1],sc[,2],pch=19, main="První 2 faktory")
## vizualizace při diskretizaci proměnných (hrozný způsob diskretizace)
cereal.short <- cereal_data[, c("calories", "protein", "fat", "carbo","sugars")]
sc.sh <- factanal(~., data = cereal.short, factors = 2, scores="Bartlett")$scores
plot(sc.sh[,1],sc.sh[,2],pch=19, main="První 2 faktory")
loading_plot <- biplot(sc, sc, cex = 0.7)
library(gplots)
heatmap.2(abs(fact_anal$loadings),
Colv = NA, Rowv = NA,
col = colorRampPalette(c("white", "blue"))(100),
scale = "none",
margins = c(5,10),
main = "Heatmap zatížení proměnných na faktory",
cexCol = 1)
fact_anal <- factanal(~., data = cereal, factors = 5)
fact_anal
factanal(m1, factors=3)
#######################################
#### Mnohorozmerna statistika
## Mnohorozmerny dvouvyberovy T-test (Hotellingovo T2)
library(DescTools)
# nacteni knihovny
# Porovnavame 2 vyucujici na zaklade hodnoceni jejich studentu.
#   Je mezi vyucujicimi vyznamny rozdil?
matematici <- data.frame(ucitel = factor(rep(1:2, c(5, 7))),
spokojenost = c(1, 3, 2, 4, 3, 2, 6, 4, 5, 5, 3, 4),
znalost = c(4, 7, 2, 6, 3, 6, 6, 8, 7, 10, 9, 6))
# vytvoreni dat
matematici
# ukazka dat
tapply(matematici$spokojenost,matematici$ucitel,mean)
tapply(matematici$znalost,matematici$ucitel,mean)
# prumerna spokojenost a znalost u jednotlivych ucitelu
# jednorozmerne porovnani
boxplot(matematici$spokojenost~matematici$ucitel)
boxplot(matematici$znalost~matematici$ucitel)
t.test(matematici$spokojenost~matematici$ucitel)
t.test(matematici$znalost~matematici$ucitel)
# u znalosti vychazi vyznamny rozdil, u spokojenosti ne
(m1 <- HotellingsT2Test(cbind(matematici$spokojenost, matematici$znalost) ~ matematici$ucitel))
# porovnani obou hodnoceni u ucitelu
## MANOVA - jak se vytvari plasticky film
# vytvoreni dat
trhliny <- c(6.5, 6.2, 5.8, 6.5, 6.5, 6.9, 7.2, 6.9, 6.1, 6.3, 6.7, 6.6, 7.2, 7.1, 6.8, 7.1, 7.0, 7.2, 7.5, 7.6)
lesk <- c(9.5, 9.9, 9.6, 9.6, 9.2, 9.1, 10.0, 9.9, 9.5, 9.4, 9.1, 9.3, 8.3, 8.4, 8.5, 9.2, 8.8, 9.7, 10.1, 9.2)
sytost <- c(4.4, 6.4, 3.0, 4.1, 0.8, 5.7, 2.0, 3.9, 1.9, 5.7, 2.8, 4.1, 3.8, 1.6, 3.4, 8.4, 5.2, 6.9, 2.7, 1.9)
Y <- cbind(trhliny, lesk, sytost)
# zavisle promenna se sklada ze tri dilcich promennych
pomer <- factor(gl(2,10), labels=c("Nizky", "Vysoky"))
prisady <- factor(gl(2, 5, length=20), labels=c("Nizky", "Vysoky"))
# dva nezavisle faktory ... tri zavisle promenne se budou porovnavat v techto skupinach
(fit <- manova(Y ~ pomer * prisady))
# vlastni model - na vystupu jsou soucty ctvercu pro kazdou promennou
summary.aov(fit)
# tabulky jednorozmernych analyz rozptylu pro kazdou promennou zvlast
# na nezavisle promennych zavisi jen trhliny a lesk
summary(fit, test="Wilks")
# existuje nekolik testovych statistik na nichz je zalozena mnohorozmerna analyza rozptylu
# R-ko nabizi statistiky: "Pillai", "Wilks", "Hotelling-Lawley", "Roy"
# Wilkovo lambda je zobecnenim klasicke F-statistiky z jednorozmerne ANOVy
summary(fit)
summary(fit, test="Hotelling-Lawley")
# pouziti jine testove statistiky
# interakce nejsou vyznamne
(fit2 <- manova(Y ~ pomer + prisady))
summary(fit2)
# mira vlivu samostatnych promennych
# Metoda hlavnich komponent
v1 <- c(1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,4,5,6)
v2 <- c(1,2,1,1,1,1,2,1,2,1,3,4,3,3,3,4,6,5)
v3 <- c(3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,5,4,6)
v4 <- c(3,3,4,3,3,1,1,2,1,1,1,1,2,1,1,5,6,4)
v5 <- c(1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,6,4,5)
v6 <- c(1,1,1,2,1,3,3,3,4,3,1,1,1,2,1,6,5,4)
vmat <- data.frame(v1,v2,v3,v4,v5,v6)
m1 <- cbind(v1,v2,v3,v4,v5,v6)
# vytvoreni dat
# Zakladem analyzy hlavnich komponent je korelacni matice
cor(m1)
# korelacni matice
eigen(cor(m1))
# vlastni cisla a vlastni vektory korelacni matice
screeplot(princomp(m1),type="l")
abline(h=1,col="green")
# Pocet hlavnich komponent
# dostatecne velke procento vyuzite variability (80%)
cumsum(eigen(cor(m1))$values/sum(eigen(cor(m1))$values))
# prvni 3 komponenty vysvetli pres 90% variability
# pocet vlastnich cisel vetsich nez 1
prcomp(m1)
(PC<-prcomp(vmat,scale=T))
# hlavni komponenty
# vrati variabilitu hlavnich komponent spolu s koeficienty jednotlivych komponent
plot(PC)
# vykresli variabilitu
plot(PC$x[,1],PC$x[,2],pch=19,main="Prvni 2 hlavni komponenty")
# vykresleni prvnich dvou hlavnich komponent, ukazuji v datech skupiny
# maji hlavni komponenty prirozenou interpretaci?
#   mnohdy ne, pak je potreba pouzit faktorovou analyzu
## Faktorova analyza
factanal(m1, factors=3)
# faktorova analyza jen prerotuje hlavni komponenty
#	metoda rotace 'varimax' je brana jako zakladni (defaultni)
# vypis loadingu a procent vysvetlene variability
(sc<-factanal(~v1+v2+v3+v4+v5+v6, factors = 3,scores = "Bartlett")$scores)
# faktorove skory pro jednotliva pozorovani
plot(sc[,1],sc[,2],pch=19, main="Prvni 2 faktory")
cereal_data
plot(hc, hang = -1)
UScereal
cereal_data <- UScereal
cereal_data <- subset(cereal_data, select = c("calories", "protein", "fat", "sodium", "fibre", "carbo", "sugars", "potassium"))
cereal_data
hc <- hclust(dist(cereal_data))
plot(hc, hang = -1)
# vidím outliery který jsou specialozovany na nějakou proměnnou a rozhodnul jsem se jich zbavit pro tuto analýzu
cereal_data <- subset(cereal_data, !(Name %in% c("Grape-Nuts", "All-Bran", "100% Bran", "All-Bran with Extra Fiber")))
cereal_data <- subset(cereal_data, !(Name %in% c("Grape-Nuts", "All-Bran", "100% Bran", "All-Bran with Extra Fiber")))
cereal_data <- subset(cereal_data, !(Name %in% c("Grape-Nuts", "All-Bran", "100% Bran", "All-Bran with Extra Fiber")))
print(colnames(cereal_data))
print(cereal_data[, 1])
print(cereal_data[, 0])
print(cereal_data[, 0])
print(cereal_data[, 2])
rownames(UScereal)
cereal_data <- cereal_data[!(rownames(cereal_data) %in% c("Grape-Nuts", "All-Bran", "100% Bran", "All-Bran with Extra Fiber")), ]
hc <- hclust(dist(cereal_data))
plot(hc, hang = -1)
# Určení počtu shluků
k <- 5
plot(hc)
rect.hclust(hc, k)
fact_anal <- factanal(~., data = cereal, factors = 5)
fact_anal
fact_anal <- factanal(~., data = cereal, factors = 4)
fact_anal
library(psych)
install.packages(psych)
install.packages("psych")
library(psych)
screeplot(fact_anal, factors = FALSE)
# Create factor loading plot
plot(fact_anal$loadings[,1], type="n", ylim=c(-1,1), xlim=c(1,length(colnames(cereal))))
text(fact_anal$loadings[,1], colnames(cereal), cex=0.7, xpd=TRUE)
biplot(fact_anal)
library(ggplot2)
library(tidyr)
# Create factor correlation plot
corrplot(cor(fact_anal$loadings), method = "color")
fact_anal <- factanal(~., data = cereal, factors = 4,scores = "Bartlett")
fact_anal
sc<-fact_anal$scores
sc
pairs(scores)
pairs(sc)
## Vysledky ciselnych testu namerenych v datovem souboru UScereals znazornete vhodnym grafem.
# K jeho vykresleni vyuzijte faktorovou analyzu, pripadne hlavni komponenty, pokud vhodne faktory nebude mozno vytvorit.
fact_anal <- factanal(~., data = cereal_data, factors = 4,scores = "Bartlett")
fact_anal
sc<-fact_anal$scores
sc
# vizualizace
pairs(sc)
# Závěr
fact_anal <- factanal(~., data = cereal_data, factors = 8,scores = "Bartlett")
fact_anal <- factanal(~., data = cereal_data, factors = 6,scores = "Bartlett")
fact_anal <- factanal(~., data = cereal_data, factors = 5,scores = "Bartlett")
fact_anal <- factanal(~., data = cereal_data, factors = 5,scores = "Bartlett")
fact_anal <- factanal(~., data = cereal_data, factors = 5,scores = "Bartlett")
## Vysledky ciselnych testu namerenych v datovem souboru UScereals znazornete vhodnym grafem.
# K jeho vykresleni vyuzijte faktorovou analyzu, pripadne hlavni komponenty, pokud vhodne faktory nebude mozno vytvorit.
fact_anal <- factanal(~., data = cereal_data, factors = 4,scores = "Bartlett")
fact_anal
sc<-fact_anal$scores
sc
# vizualizace
pairs(sc)
```{r}
library(MASS)
library(DescTools)
jazykovy_test <- nlschools$lang
socioeko_status <- nlschools$SES
# vykreslení prvních deseti hodnot ať vím s čím pracuji
head(jazykovy_test, 10)
head(socioeko_status, 10)
kategorie <- factor(socioeko_status, levels = levels(kategorie)[1:5])
boxplot(jazykovy_test~kategorie,main="vysledky testu podle socioeko statusu",col="orange")
kategorie <- factor(socioeko_status, levels = levels(kategorie)[1:5])
res<-residuals(lm(jazykovy_test~kategorie))
PlotQQ(res)
shapiro.test(res)
boxplot(jazykovy_test~kategorie,main="vysledky testu podle socioeko statusu",col="orange")
oneway.test(jazykovy_test~kategorie, var.equal = FALSE)
TukeyHSD(aov(jazykovy_test~factor(kategorie), var.equal = FALSE))
plot(TukeyHSD(aov(jazykovy_test~factor(kategorie))))
# věcná významnost
# věcně významné jsou rozdíly mezi skupinami 10 - 15, 10 - 18
TukeyHSD(aov(jazykovy_test~factor(kategorie), var.equal = FALSE))
plot(TukeyHSD(aov(jazykovy_test~factor(kategorie))))
cereal_data <- UScereal
cereal_data <- subset(cereal_data, select = c("calories", "protein", "fat", "sodium", "fibre", "carbo", "sugars", "potassium"))
cereal_data
cereal_data <- UScereal
cereal_data <- subset(cereal_data, select = c("calories", "protein", "fat", "sodium", "fibre", "carbo", "sugars", "potassium"))
hc <- hclust(dist(cereal_data))
plot(hc, hang = -1)
# vidím outliery který jsou specialozovany na nějakou proměnnou a rozhodnul jsem se jich zbavit pro tuto analýzu
UScereal
cereal_data <- UScereal
cereal_data <- subset(cereal_data, select = c("calories", "protein", "fat", "sodium", "fibre", "carbo", "sugars", "potassium"))
cereal_data
hc <- hclust(dist(cereal_data))
plot(hc, hang = -1)
cereal_data <- cereal_data[!(rownames(cereal_data) %in% c("Grape-Nuts", "All-Bran", "100% Bran", "All-Bran with Extra Fiber")), ]
hc <- hclust(dist(cereal_data))
plot(hc, hang = -1)
cereal_data <- cereal_data[!(rownames(cereal_data) %in% c("Grape-Nuts", "All-Bran", "100% Bran", "All-Bran with Extra Fiber")), ]
hc <- hclust(dist(cereal_data))
plot(hc, hang = -1)
cereal_data <- cereal_data[!(rownames(cereal_data) %in% c("Grape-Nuts", "All-Bran", "100% Bran", "All-Bran with Extra Fiber")), ]
hc <- hclust(dist(cereal_data))
plot(hc, hang = -1)
k <- 5
plot(hc)
rect.hclust(hc, k)
# Protože jde o dataset kde má vliv hodně proměnných najednou mi nedává smysl použít k-means nebo jiný dvoudimensionální
# přístup.
k <- 5
plot(hc)
rect.hclust(hc, k)
# Protože jde o dataset kde má vliv hodně proměnných najednou mi nedává smysl použít k-means nebo jiný dvoudimensionální
# přístup.
fact_anal <- factanal(~., data = cereal_data, factors = 4,scores = "Bartlett")
fact_anal
